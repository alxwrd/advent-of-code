import itertools

PUZZLE_INPUT = ("82393664534558127269567731851345949183464112984439374267255"
                "35444391263143998467732348455355933553489314994961848395821"
                "18817689171948635864427852215325421433717458975771369522138"
                "76624822596324216865897532635478541525297429431713851114182"
                "62268663645557611171787645434358998867114263196754436798291"
                "81257496966219435831621565519667989898725836639626681645821"
                "71486144314189342767238471673276588484477243337479818595574"
                "13111163658996598336342379388781813673172186355396673573642"
                "95754744829595842962773524584225427969467467611641591834876"
                "76982971924813661314735129853488556314411433621196167439291"
                "21817357738516342982274541578852417691568117876118973499653"
                "31474217223461176896643242975397227859696554492996937235423"
                "27254934834952855943221452155165697113685997223285412626234"
                "93812544245973488744477365457222619578712759357567641843789"
                "94167427983811716675476257858556464755677478725146588747147"
                "85737529367571157574713247172793377351257136846738615196656"
                "85989646313314288697621518536343623569357512981218492814421"
                "28796517663482391226174256395515166361514442624944181255952"
                "12452481526886413196915143388872121359526792732575956213273"
                "25862524384565695569926858965175652577874646737182218177839"
                "29691626876446423134331749327322367571432532857235214364221"
                "47176948166711811772932642955635757242133379851716899786315"
                "19272814182384917919753993573934947519131552198623999596469"
                "93428921878798119215675548847845477994836744929918954159722"
                "82719472156412153231545961143315738499454333277379686216524"
                "31833784647315467874981748447817811395719842722358728668862"
                "75879944921329959736315296733981313643956576956851762149275"
                "52194917799198823652947537359521766511243472774423578985285"
                "27656751893427536953772193747915485547866714737331249519467"
                "79531847479755363363288448281622183736545494372344785112312"
                "74969416748399673838435129389914913685772854597744276348979"
                "96934923195497733286269188747183876978782357441544916779223"
                "17518952687439655962477734559232755624943644966227973617788"
                "18221362189957939132439938614642342726287443799257957385858"
                "91835718545778614597585343485335539251679471393518195117988"
                "29977371215856637215221838924612644785498936263849489519896"
                "54881125462897664239142841398428175877186878171426626178135"
                "9762798")


def sum_matching(puzzle_input, step=1):
    """For a string of numbers, sum digits if they match the digit `step` away.

    NOTE: The calculation is circular, so the digit after the last digit is
           the first digit in the list.

    Usage:
        >>>captcha("1122")
        3
        >>>captcha("1212", step=2)
        6
    """
    #Make the string circular
    puzzle_input += puzzle_input[0:step]

    #Create two iterables from the input
    first, second = itertools.tee(puzzle_input)

    #Advance one iterable forward the number of steps
    for _ in range(step):
        next(second)

    #Sum numbers if the number matches
    return sum(int(x) for x, y in zip(first, second) if x == y)
